# 1. manifest.json - ไฟล์กำหนดค่าหลักของ Extension
{
  "manifest_version": 3,
  "name": "ESP32 Timer Relay Control",
  "version": "1.0",
  "description": "Control ESP32 Timer Relays via MQTT",
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "permissions": [
    "storage"
  ],
  "content_security_policy": {
    "extension_pages": "script-src 'self' https://cdnjs.cloudflare.com 'wasm-unsafe-eval'; object-src 'self';"
  }
}

# 2. popup.html - หน้าต่าง popup ของ Extension
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <link rel="stylesheet" href="popup.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mqtt/4.3.7/mqtt.min.js"></script>
</head>
<body>
  <div class="container">
    <div id="connectionStatus" class="connection-status disconnected">
      ค้นหาอุปกรณ์...
    </div>
    
    <div class="relay-grid">
      <div class="relay-card">
        <h2>ปริ้นเอกสาร</h2>
        <div class="timer-display" id="relay1Timer">00:00</div>
        <div class="status" id="relay1Status">
          <div><span class="status-icon"></span><span class="status-text">รอการเชื่อมต่อ</span></div>
        </div>
        <div class="toggle-container">
          <span class="toggle-label">นับเวลาถอยหลัง</span>
          <label class="switch">
            <input type="checkbox" id="timer1Toggle" checked>
            <span class="slider"></span>
          </label>
        </div>
        <div class="button-group">
          <button class="control-button on" id="relay1Button">เปิด</button>
        </div>
      </div>

      <div class="relay-card">
        <h2>ปริ้นรูปขนาดใหญ่</h2>
        <div class="timer-display" id="relay2Timer">00:00</div>
        <div class="status" id="relay2Status">
          <div><span class="status-icon"></span><span class="status-text">รอการเชื่อมต่อ</span></div>
        </div>
        <div class="toggle-container">
          <span class="toggle-label">นับเวลาถอยหลัง</span>
          <label class="switch">
            <input type="checkbox" id="timer2Toggle" checked>
            <span class="slider"></span>
          </label>
        </div>
        <div class="button-group">
          <button class="control-button on" id="relay2Button">เปิด</button>
        </div>
      </div>
    </div>
  </div>
  <script src="popup.js"></script>
</body>
</html>

# 3. popup.css - สไตล์ชีทสำหรับ popup
body {
  width: 400px;
  padding: 15px;
  font-family: 'Kanit', sans-serif;
}

.container {
  padding: 10px;
}

.relay-grid {
  display: grid;
  gap: 15px;
}

.relay-card {
  background: #ffffff;
  border-radius: 8px;
  padding: 15px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.timer-display {
  font-size: 1.5em;
  text-align: center;
  margin: 10px 0;
  color: #2196F3;
  font-family: monospace;
}

.status {
  padding: 10px;
  border-radius: 5px;
  margin: 10px 0;
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: #f8f9fa;
}

.status-icon {
  display: inline-block;
  width: 10px;
  height: 10px;
  border-radius: 50%;
  margin-right: 8px;
}

.status-on .status-icon {
  background-color: #4CAF50;
  box-shadow: 0 0 5px #4CAF50;
}

.status-off .status-icon {
  background-color: #f44336;
}

.button-group {
  margin-top: 15px;
}

.control-button {
  width: 100%;
  padding: 8px;
  border: none;
  border-radius: 5px;
  font-family: 'Kanit', sans-serif;
  font-size: 1em;
  cursor: pointer;
  transition: all 0.3s ease;
}

.control-button.on {
  background-color: #4CAF50;
  color: white;
}

.control-button.off {
  background-color: #f44336;
  color: white;
}

.control-button:hover {
  opacity: 0.9;
}

.connection-status {
  padding: 10px;
  margin-bottom: 15px;
  border-radius: 5px;
  text-align: center;
  font-size: 0.9em;
}

.connected {
  background-color: rgba(76, 175, 80, 0.1);
  color: #4CAF50;
}

.disconnected {
  background-color: rgba(244, 67, 54, 0.1);
  color: #f44336;
}

/* Toggle Switch Style */
.toggle-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin: 10px 0;
  padding: 10px;
  background-color: #f8f9fa;
  border-radius: 5px;
}

.switch {
  position: relative;
  display: inline-block;
  width: 40px;
  height: 24px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  transition: .4s;
  border-radius: 24px;
}

.slider:before {
  position: absolute;
  content: "";
  height: 20px;
  width: 20px;
  left: 2px;
  bottom: 2px;
  background-color: white;
  transition: .4s;
  border-radius: 50%;
}

input:checked + .slider {
  background-color: #4CAF50;
}

input:checked + .slider:before {
  transform: translateX(16px);
}

# 4. popup.js - โค้ด JavaScript สำหรับควบคุมการทำงาน
const mqttServer = 'test.mosquitto.org';
const mqttPort = 8081;
const deviceId = 'extension_' + Math.random().toString(16).substr(2, 8);

const topicPrefix = 'iot/timer-relay/';
const topics = {
  relay1Control: topicPrefix + 'relay1/control',
  relay2Control: topicPrefix + 'relay2/control',
  status: topicPrefix + 'status',
  command: topicPrefix + 'command'
};

let timerEnabled = {
  1: true,
  2: true
};

const client = mqtt.connect(`wss://${mqttServer}:${mqttPort}`, {
  clientId: deviceId,
  clean: true,
  reconnectPeriod: 3000,
  connectTimeout: 30 * 1000
});

client.on('connect', () => {
  console.log('Connected to MQTT broker');
  document.getElementById('connectionStatus').className = 'connection-status connected';
  document.getElementById('connectionStatus').innerHTML = 'พร้อมใช้งาน';
  client.subscribe(topics.status);
  requestStatus();
});

client.on('message', (topic, message) => {
  console.log('Received:', topic, message.toString());
  if (topic === topics.status) {
    try {
      updateStatus(JSON.parse(message.toString()));
    } catch (e) {
      console.error('Error parsing status:', e);
    }
  }
});

client.on('error', (error) => {
  console.error('MQTT Error:', error);
  document.getElementById('connectionStatus').className = 'connection-status disconnected';
  document.getElementById('connectionStatus').innerHTML = 'การเชื่อมต่อผิดพลาด: ' + error.message;
});

client.on('offline', () => {
  console.log('MQTT Connection offline');
  document.getElementById('connectionStatus').className = 'connection-status disconnected';
  document.getElementById('connectionStatus').innerHTML = 'ขาดการเชื่อมต่อ';
});

function toggleTimer(relayNumber, enabled) {
  timerEnabled[relayNumber] = enabled;
  const topic = relayNumber === 1 ? topics.relay1Control : topics.relay2Control;
  const message = JSON.stringify({
    action: 'TIMER_MODE',
    enabled: enabled
  });
  client.publish(topic, message);
}

function toggleRelay(relayNumber) {
  const button = document.getElementById(`relay${relayNumber}Button`);
  const currentState = button.textContent === 'เปิด' ? 'OFF' : 'ON';
  const action = currentState === 'OFF' ? 'ON' : 'OFF';
  const topic = relayNumber === 1 ? topics.relay1Control : topics.relay2Control;
  
  const message = JSON.stringify({
    action: action,
    timerEnabled: timerEnabled[relayNumber]
  });
  client.publish(topic, message);
}

function requestStatus() {
  client.publish(topics.command, JSON.stringify({
    command: 'status'
  }));
}

function formatTime(seconds) {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
}

function updateRelayStatus(relayNumber, relayStatus) {
  if (!relayStatus) return;

  const statusElement = document.getElementById(`relay${relayNumber}Status`);
  const timerElement = document.getElementById(`relay${relayNumber}Timer`);
  const buttonElement = document.getElementById(`relay${relayNumber}Button`);
  const timerToggle = document.getElementById(`timer${relayNumber}Toggle`);

  if (relayStatus.active) {
    statusElement.className = 'status status-on';
    statusElement.innerHTML = '<div><span class="status-icon"></span><span class="status-text">เปิด</span></div>';
    buttonElement.textContent = 'ปิด';
    buttonElement.className = 'control-button off';

    if (relayStatus.remaining !== undefined && timerEnabled[relayNumber]) {
      timerElement.textContent = formatTime(relayStatus.remaining);
      timerElement.classList.add('active-timer');
    }
  } else {
    statusElement.className = 'status status-off';
    statusElement.innerHTML = '<div><span class="status-icon"></span><span class="status-text">ปิด</span></div>';
    buttonElement.textContent = 'เปิด';
    buttonElement.className = 'control-button on';
    timerElement.textContent = '00:00';
    timerElement.classList.remove('active-timer');
  }

  if (relayStatus.timerEnabled !== undefined) {
    timerToggle.checked = relayStatus.timerEnabled;
    timerEnabled[relayNumber] = relayStatus.timerEnabled;
  }
}

function updateStatus(status) {
  updateRelayStatus(1, status.relay1);
  updateRelayStatus(2, status.relay2);
}

// Add event listeners
document.getElementById('relay1Button').addEventListener('click', () => toggleRelay(1));
document.getElementById('relay2Button').addEventListener('click', () => toggleRelay(2));
document.getElementById('timer1Toggle').addEventListener('change', (e) => toggleTimer(1, e.target.checked));
document.getElementById('timer2Toggle').addEventListener('change', (e) => toggleTimer(2, e.target.checked));

// Request status update every second
setInterval(requestStatus, 1000);
